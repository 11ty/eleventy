export default GlobalDependencyMap;
declare class GlobalDependencyMap {
    static LAYOUT_KEY: string;
    static COLLECTION_PREFIX: string;
    static getEntryFromCollectionKey(entry: any): any;
    static getCollectionKeyForEntry(entry: any): string;
    reset(): void;
    _map: any;
    setIsEsm(isEsm: any): void;
    isEsm: any;
    setTemplateConfig(templateConfig: any): void;
    setConfig(config: any): void;
    config: any;
    filterOutLayouts(nodes?: any[]): any[];
    filterOutCollections(nodes?: any[]): any[];
    removeLayoutNodes(normalizedLayouts: any): void;
    addLayoutsToMap(layouts: any): Promise<void>;
    set map(graph: any);
    get map(): any;
    normalizeNode(node: any): any;
    normalizeLayoutsObject(layouts: any): {};
    getDependantsFor(node: any): any;
    hasNode(node: any): any;
    findCollectionsRemovedFrom(node: any, collectionNames: any): Set<any>;
    resetNode(node: any): void;
    getTemplatesThatConsumeCollections(collectionNames: any): Set<any>;
    getLayoutsUsedBy(node: any): any[];
    getTemplatesRelevantToTemplateList(templatePaths: any): any;
    getDependencies(node: any, includeLayouts?: boolean): any;
    _addDependency(from: any, toArray?: any[]): void;
    addDependency(from: any, toArray?: any[]): void;
    addDependencyConsumesCollection(from: any, collectionName: any): void;
    addDependencyPublishesToCollection(from: any, collectionName: any): void;
    hasDependency(from: any, to: any, includeLayouts: any): any;
    isFileRelevantTo(fullTemplateInputPath: any, comparisonFile: any, includeLayouts: any): boolean;
    stringify(): string;
    restore(persisted: any): void;
    #private;
}
